var secrecy_currentSearchFilter = "";
var curDanxuanProblemNumber = -1;
var totalDanxuanProblemNumber = -1;
var curDuoxuanProblemNumber = -1;
var totalDuoxuanProblemNumber = -1;
var curPanduanProblemNumber = -1;
var totalPanduanProblemNumber = -1;

var iscommit = false;
var isExamBegin = false;
var checktime = "";
//是否参加过本次考试
var isExamed = false;


var papernum = -1;
var testpaperrecordid = "";
var starttime = "";
var endtime = "";
var examname = "";


var danxuanAnswerArray = new Array(100);
var duoxuanAnswerArray = new Array(100);
var panduanAnswerArray = new Array(100);

var danxuanJsonArray = [];
var duoxuanJsonArray = [];
var panduanJsonArray = [];

var xuanzeQuestion = new Ext.data.Record.create([ {
	name : 'id'
},{
	name : 'question'
}, {
	name : 'option1'
}, {
	name : 'option2'
}, {
	name : 'option3'
}, {
	name : 'option4'
}, {
	name : 'problemnum'
}

]);

var panduanQuestion = new Ext.data.Record.create([ {
	name : 'id'
}, {
	name : 'question'
}, {
	name : 'problemnum'
}

]);

var testpaperRecord = new Ext.data.Record.create([ {
	name : 'id'
}, {
	name : 'papernum'
}, {
	name : 'starttime'
}, {
	name : 'endtime'
},{
	name : 'examname'
}
]);

var danxuanQuestionStore = new Ext.data.Store({
	reader : new Ext.data.JsonReader({
		totalProperty : 'totalProperty',
		root : 'root'
	}, xuanzeQuestion),
	proxy : new Ext.ux.data.DWRProxy({
		dwrFunction : ProblemDanXuanController.paginationShow
	})
});

var duoxuanQuestionStore = new Ext.data.Store({
	reader : new Ext.data.JsonReader({
		totalProperty : 'totalProperty',
		root : 'root'
	}, xuanzeQuestion),
	proxy : new Ext.ux.data.DWRProxy({
		dwrFunction : ProblemDuoXuanController.paginationShow
	})
});

var panduanQuestionStore = new Ext.data.Store({
	reader : new Ext.data.JsonReader({
		totalProperty : 'totalProperty',
		root : 'root'
	}, panduanQuestion),
	proxy : new Ext.ux.data.DWRProxy({
		dwrFunction : ProblemPanDuanController.paginationShow
	})
});

var testpaperRecordStore = new Ext.data.Store({
	reader : new Ext.data.JsonReader({
		totalProperty : 'totalProperty',
		root : 'root'
	}, testpaperRecord),
	proxy : new Ext.ux.data.DWRProxy({
		dwrFunction : TestPaperRecordController.getTestPaperRecordList
	})
});


var danxuanOperateform = new Ext.FormPanel({
	id : 'danxuanOperateform',
	height : 500,
	columnWidth : 0.2,
	width : '180',
	labelWidth : 60,
	frame : true,
	region : 'center',
	labelAlign : 'center',
	layout : 'anchor',
	items : [ {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '第一题',
			margin : '20 20 20 20',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getFirstDanxuanProblem
		} ]
	}, {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '上一题',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getPreviousDanxuanProblem
		} ]
	}, {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '下一题',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getNextDanxuanProblem
		} ]
	}, {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '最后一题',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getLastDanxuanProblem
		} ]
	} ]

});

var duoxuanOperateform = new Ext.FormPanel({
	id : 'duoxuanOperateform',
	height : 500,
	columnWidth : 0.2,
	width : '180',
	labelWidth : 60,
	frame : true,
	region : 'center',
	labelAlign : 'center',
	layout : 'anchor',
	items : [ {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '第一题',
			margin : '20 20 20 20',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getFirstDuoxuanProblem
		} ]
	}, {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '上一题',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getPreviousDuoxuanProblem
		} ]
	}, {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '下一题',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getNextDuoxuanProblem
		} ]
	}, {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '最后一题',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getLastDuoxuanProblem
		} ]
	} ]
});

var panduanOperateform = new Ext.FormPanel({
	id : 'panduanOperateform',
	height : 500,
	columnWidth : 0.2,
	width : '180',
	labelWidth : 60,
	frame : true,
	region : 'center',
	labelAlign : 'center',
	layout : 'anchor',
	items : [ {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '第一题',
			margin : '20 20 20 20',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getFirstPanduanProblem
		} ]
	}, {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '上一题',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getPreviousPanduanProblem
		} ]
	}, {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '下一题',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getNextPanduanProblem
		} ]
	}, {
		columnWidth : 1.0,
		layout : 'form',
		height : 40,
		labelWidth : 60,
		items : [ {
			xtype : 'button',
			text : '最后一题',
			anchor : '80.5%',
			style : "position:relative;top:10px;",
			handler : getLastPanduanProblem
		} ]
	} ]

});

var danxuanProblemform = new Ext.FormPanel({
	id : 'danxuanProblemform',
	height : 500,
	columnWidth : 0.8,
	labelWidth : 60,
	frame : true,
	labelAlign : 'left',
	layout : 'column',
	items : [ {
		id : 'danxuantiLeftForm',
		columnWidth : 1.0,
		layout : 'form',
		labelWidth : 60,
		items : [ {
			id : 'danxuanDisplayProblem',
			xtype : 'displayfield',
			height : 180,
			fieldLabel : '题目内容',
			labelWidth : 70,
			labelSeparator : "：",
			style : "position:relative;top:60px;right:'20px';fontSize:'25px'",
			value : ""
		} ]
	}, new Ext.Panel({
		id : 'danxuantiRightForm',
		columnWidth : 1.0,
		layout : 'column',
		border : false,
		labelWidth : 50,
		labelAlign : 'right',
		items : [ {
			id : 'danxuanOptionA',
			xtype : 'radio',
			name : 'danxuanAnswer',
			columnWidth : 1.0,
			layout : 'column',
			boxLabel : 'A.',
			inputValue : 'A',
			checked : false,
			style : "top:10px;right:'20px'",
			anchor : "95%",
			listeners : {
				'change' : function() {
					if (curDanxuanProblemNumber != -1)
						setDanxuanAnswerArrayValue(curDanxuanProblemNumber, 1);
				}
			}

		}, {
			xtype : 'radio',
			id : 'danxuanOptionB',
			name : 'danxuanAnswer',
			columnWidth : 1.0,
			layout : 'column',
			boxLabel : 'B.',
			inputValue : 'B',
			labelSeparator : '',
			anchor : "95%",
			style : "top:10px;right:'20px'",
			listeners : {
				'change' : function() {
					if (curDanxuanProblemNumber != -1)
						setDanxuanAnswerArrayValue(curDanxuanProblemNumber, 2);
				}
			}
		}, {
			xtype : 'radio',
			id : 'danxuanOptionC',
			name : 'danxuanAnswer',
			columnWidth : 1.0,
			layout : 'column',
			boxLabel : 'C.',
			inputValue : 'C',
			labelSeparator : '',
			anchor : "95%",
			listeners : {
				'change' : function() {
					if (curDanxuanProblemNumber != -1)
						setDanxuanAnswerArrayValue(curDanxuanProblemNumber, 3);
				}
			}
		}, {
			xtype : 'radio',
			id : 'danxuanOptionD',
			name : 'danxuanAnswer',
			columnWidth : 1.0,
			layout : 'column',
			boxLabel : 'D.',
			inputValue : 'D',
			labelSeparator : '',
			anchor : "95%",
			listeners : {
				'change' : function() {
					if (curDanxuanProblemNumber != -1)
						setDanxuanAnswerArrayValue(curDanxuanProblemNumber, 4);
				}
			}
		} ]
	}) ]
});

var duoxuanProblemform = new Ext.FormPanel(
		{
			id : 'duoxuanProblemform',
			height : 500,
			columnWidth : 0.8,
			labelWidth : 60,
			frame : true,
			labelAlign : 'left',
			layout : 'column',
			items : [
					{
						id : 'duoxuantiLeftForm',
						columnWidth : 1.0,
						layout : 'form',
						labelWidth : 60,
						items : [ {
							id : 'duoxuanDisplayProblem',
							xtype : 'displayfield',
							height : 180,
							fieldLabel : '题目内容',
							labelWidth : 70,
							labelSeparator : "：",
							style : "position:relative;top:60px;right:'20px';fontSize:'25'",
							value : ""
						} ]
					},
					new Ext.Panel(
							{
								id : 'duoxuantiRightForm',
								columnWidth : 1.0,
								layout : 'column',
								border : false,
								labelWidth : 50,
								labelAlign : 'right',
								items : [ {
									id : 'duoxuanOptionCheckbox',
									defaultType : 'checkbox',
									name : 'duoxuanAnswer',
									columnWidth : 1.0,
									columns : 1,
									vertical : true,
									items : [
											{
												boxLabel : 'A.',
												name : 'duoxuanAnswer',
												inputValue : '1',
												checked : false,
												id : 'duoxuanOptionA',
												listeners : {
													'check' : function(obj,
															ischecked) {
														if (curDuoxuanProblemNumber != -1) {
															if (ischecked) {
																setDuoxuanAnswerArrayValue(
																		curDuoxuanProblemNumber,
																		0, 1);

															} else {
																setDuoxuanAnswerArrayValue(
																		curDuoxuanProblemNumber,
																		0, 0);
															}
														}

													}
												}
											},
											{
												boxLabel : 'B.',
												name : 'duoxuanAnswer',
												inputValue : '2',
												id : 'duoxuanOptionB',
												listeners : {
													'check' : function(obj,
															ischecked) {
														if (curDuoxuanProblemNumber != -1) {

															if (ischecked) {
																setDuoxuanAnswerArrayValue(
																		curDuoxuanProblemNumber,
																		1, 1);

															} else {
																setDuoxuanAnswerArrayValue(
																		curDuoxuanProblemNumber,
																		1, 0);
															}
														}
													}
												}
											},
											{
												boxLabel : 'C.',
												name : 'duoxuanAnswer',
												inputValue : '3',
												id : 'duoxuanOptionC',
												listeners : {
													'check' : function(obj,
															ischecked) {
														if (curDuoxuanProblemNumber != -1) {

															if (ischecked) {
																setDuoxuanAnswerArrayValue(
																		curDuoxuanProblemNumber,
																		2, 1);

															} else {
																setDuoxuanAnswerArrayValue(
																		curDuoxuanProblemNumber,
																		2, 0);
															}
														}
													}
												}
											},
											{
												boxLabel : 'D.',
												name : 'duoxuanAnswer',
												inputValue : '4',
												id : 'duoxuanOptionD',
												listeners : {
													'check' : function(obj,
															ischecked) {
														if (curDuoxuanProblemNumber != -1) {

															if (ischecked) {
																setDuoxuanAnswerArrayValue(
																		curDuoxuanProblemNumber,
																		3, 1);

															} else {
																setDuoxuanAnswerArrayValue(
																		curDuoxuanProblemNumber,
																		3, 0);
															}
														}
													}
												}
											} ]
								}

								]
							}) ]
		});

var panduanProblemform = new Ext.FormPanel({
	id : 'panduanProblemform',
	height : 500,
	columnWidth : 0.8,
	labelWidth : 60,
	frame : true,
	labelAlign : 'left',
	layout : 'column',
	items : [ {
		id : 'panduantiLeftForm',
		columnWidth : 1.0,
		layout : 'form',
		labelWidth : 60,
		items : [ {
			id : 'panduanDisplayProblem',
			xtype : 'displayfield',
			height : 180,
			fieldLabel : '题目内容',
			labelWidth : 70,
			labelSeparator : "：",
			style : "position:relative;top:60px;right:'20px';fontSize:'25'",
			value : ""
		} ]
	}, new Ext.Panel({
		id : 'panduantiRightForm',
		columnWidth : 1.0,
		layout : 'column',
		border : false,
		labelWidth : 50,
		labelAlign : 'right',
		items : [ {
			id : 'panduanOptionA',
			xtype : 'radio',
			name : 'panduanAnswer',
			columnWidth : 1.0,
			layout : 'column',
			boxLabel : '正确',
			style : "<font size='4px' font-weight='bold'>",
			inputValue : '1',
			checked : false,
			anchor : "95%",
			listeners : {
				'change' : function() {
					if (curPanduanProblemNumber != -1)
						setPanduanAnswerArrayValue(curPanduanProblemNumber, 1);
				}
			}

		}, {
			xtype : 'radio',
			id : 'panduanOptionB',
			name : 'panduanAnswer',
			columnWidth : 1.0,
			layout : 'column',
			boxLabel : '错误',
			inputValue : '0',
			labelSeparator : '',
			style : "<font size='4px' font-weight='bold'>",
			anchor : "95%",
			listeners : {
				'change' : function() {
					if (curPanduanProblemNumber != -1)
						setPanduanAnswerArrayValue(curPanduanProblemNumber, 2);
				}
			}
		}]
	}) ]
});

var danxuanPanel = new Ext.Panel({
	id : "danxuan",
	title : "单选题",
	layout : 'column',
	items : [ danxuanProblemform, danxuanOperateform ],
	frame : true, // 圆角边框
});

var duoxuanPanel = new Ext.Panel({
	id : "duoxuan",
	title : "多选题",
	layout : 'column',
	items : [ duoxuanProblemform, duoxuanOperateform ],
	frame : true, // 圆角边框
});

var panduanPanel = new Ext.Panel({
	id : "panduan",
	title : "判断题",
	layout : 'column',
	items : [ panduanProblemform, panduanOperateform ],
	frame : true, // 圆角边框
});
var form = new Ext.form.FormPanel({
	title : "在线保密人员考试",
	region : "north",
	frame : true,
	height : 150,
	labelAlign : 'left',
	layout : 'column',
//	frame : true,
	items : [ {
		columnWidth : 0.8,
		layout : 'form',
		height : 115,
		frame : true,
		items : [ {
			xtype : 'displayfield',
			fieldLabel : '考试名称',
			id : 'examname',
			labelWidth : 72,
			labelSeparator : "：",
			style : "position:relative;top:2px;",
			value : ""
		},{
			xtype : 'displayfield',
			fieldLabel : '考试时间',
			id : 'examtime',
			labelWidth : 72,
			labelSeparator : "：",
			style : "position:relative;top:2px;",
			value : ""
		},{
			xtype : 'displayfield',
			fieldLabel : '当前时间',
			id : 'curtime',
			labelWidth : 70,
			labelSeparator : "：",
			style : "position:relative;top:2px;",
			value : ""
		},{
			xtype : 'displayfield',
			fieldLabel : '考试成绩',
			id : 'grade',
			labelWidth : 70,
			labelSeparator : "：",
			style : "position:relative;top:2px;",
			value : ""
		}]
	}, {
		columnWidth : 0.2,
		layout : 'form',
		height : 115,
		items : [ {
			xtype : 'button',
			text : '开始考试',
			anchor : '78%',
			handler : examBegin
		},{
			xtype : 'button',
			text : '考试交卷',
			anchor : '78%',
			style : "position:relative;top:10px;",
			handler : commitAnswerResult
		}]
	} ]
});

var exampanel = new Ext.TabPanel({
	id : "centerTabPanel",
	region : 'center', // a center region is ALWAYS required for border layout
	deferredRender : false,
	activeTab : 0, // first tab initially active
	resizeTabs : true,
	layoutOnTabChange : true,
	defaults : {
		autoScroll : true
	},
	items : [],

	initEvents : function() {
		Ext.TabPanel.superclass.initEvents.call(this);
		this.on('add', this.onAdd, this, {
			target : this
		});
		this.on('remove', this.onRemove, this, {
			target : this
		});
		this.mon(this.strip, 'mousedown', this.onStripMouseDown, this);
		this.mon(this.strip, 'contextmenu', this.onStripContextMenu, this);
		if (this.enableTabScroll) {
			this.mon(this.strip, 'mousewheel', this.onWheel, this);
		}
		this.mon(this.strip, 'dblclick', this.onTitleDbClick, this);
	},
	onTitleDbClick : function(e, target, o) {
		var t = this.findTargets(e);
		if (t.item.fireEvent('beforeclose', t.item) !== false) {
			t.item.fireEvent('close', t.item);
			this.remove(t.item);
		}
	}
});

Ext.override(Ext.form.Radio, {
	setBoxLabel : function(boxLabel) {
		this.boxLabel = boxLabel;
		if (this.rendered) {
			this.wrap.child('.x-form-cb-label').update(boxLabel);
		}
	}
});
Ext.override(Ext.form.Checkbox, {
	setBoxLabel : function(boxLabel) {
		this.boxLabel = boxLabel;
		if (this.rendered) {
			this.wrap.child('.x-form-cb-label').update(boxLabel);
		}
	}
});

initDanxuanAnswerArray();
initDuoxuanAnswerArray();
initPanduanAnswerArray();
// 初始化单选题答案数组
function initDanxuanAnswerArray() {
	for (var i = 0; i < danxuanAnswerArray.length; i++) {
		danxuanAnswerArray[i] = 0;
	}
}
// 初始化多选题答案数组
function initDuoxuanAnswerArray() {
	for (var i = 0; i < duoxuanAnswerArray.length; i++) {
		duoxuanAnswerArray[i] = new Array(4);
		for (var j = 0; j < duoxuanAnswerArray[i].length; j++) {
			duoxuanAnswerArray[i][j] = 0;
		}
	}

}
//初始化判断题答案数组
function initPanduanAnswerArray() {
	for (var i = 0; i < panduanAnswerArray.length; i++) {
		panduanAnswerArray[i] = 0;
	}
}

function examInfoManagerInit() {
	new Ext.Viewport({
		layout : 'border', // 表格布局
		id : 'mainpanel',
		// autoWidth:true,
		bodyPadding : 5,
		hideMode : Ext.isIE ? 'offsets' : 'display',
		items : [ form, exampanel ],
		renderTo : Ext.getBody()
	});
	addExamProblem(danxuanPanel);
	addExamProblem(duoxuanPanel);
	addExamProblem(panduanPanel);
	testpaperRecordStoreInit();

}

function addExamProblem(panel) {
	tabPanel = Ext.getCmp('centerTabPanel');
	tabPanel.add(panel);
	tabPanel.doLayout(true, true);
	tabPanel.show();
	tabPanel.setActiveTab("danxuan");
}
//单选store取值
function danxuanQuestionStoreInit() {
	danxuanQuestionStore.load({
		params : {
			filter : secrecy_currentSearchFilter,
			start : 0,
			limit : 30,
			paperNum : papernum,
//			paperNum : 1,
			userLevel : userlevel
		},callback: function(data) {
			if(danxuanQuestionStore.getCount() == 0) {
				Ext.Msg.alert('提示', "获取题目失败或者数据库已经没有选择的题目!");
			} else {
				getFirstDanxuanProblem();
			}
		}
	});
}
//多选store取值
function duoxuanQuestionStoreInit() {
	duoxuanQuestionStore.load({
		params : {
			filter : secrecy_currentSearchFilter,
			start : 0,
			limit : 30,
			paperNum : papernum,
//			paperNum : 1,
			userLevel : userlevel
		},callback: function(data) {
			if(duoxuanQuestionStore.getCount() == 0) {
				Ext.Msg.alert('提示', "获取题目失败或者数据库已经没有选择的题目!");
			} else {
				getFirstDuoxuanProblem();
			}
		}
	});
}
//判断store取值
function panduanQuestionStoreInit() {
	panduanQuestionStore.load({
		params : {
			filter : secrecy_currentSearchFilter,
			start : 0,
			limit : 40,
			paperNum : papernum,
//			paperNum : 1,
			userLevel : userlevel
		},callback: function(data) {
			if(panduanQuestionStore.getCount() == 0) {
				Ext.Msg.alert('提示', "获取题目失败或者数据库已经没有选择的题目!");
			} else {
				getFirstPanduanProblem();
			}
		}
	});
}

//出卷记录store取值
function testpaperRecordStoreInit() {
	testpaperRecordStore.load();
}

// 得到单选题的总数
function getTotalDanxuanProblemNumber() {
	totalDanxuanProblemNumber = danxuanQuestionStore.getCount();
}
// 得到多选题的总数
function getTotalDuoxuanProblemNumber() {
	totalDuoxuanProblemNumber = duoxuanQuestionStore.getCount();
}
//得到判断题的总数
function getTotalPanduanProblemNumber(){
	totalPanduanProblemNumber = panduanQuestionStore.getCount();
}

function setDanxuanAnswerArrayValue(localCurProblemNum, value) {
	danxuanAnswerArray[localCurProblemNum] = value;
}

function setDuoxuanAnswerArrayValue(localCurProblemNum, optionNumber, value) {
	duoxuanAnswerArray[localCurProblemNum][optionNumber] = value;
}
function setPanduanAnswerArrayValue(localCurProblemNum, value) {
	panduanAnswerArray[localCurProblemNum] = value;
}


//将单选题的题目和选项展示到页面
function getDanxuanProblemAndAnswer(localCurProblemNum) {
	var firstProblem = danxuanQuestionStore.getAt(localCurProblemNum).get(
			'question');
	var aAnswer = danxuanQuestionStore.getAt(curDanxuanProblemNumber).get(
			'option1');
	var bAnswer = danxuanQuestionStore.getAt(curDanxuanProblemNumber).get(
			'option2');
	var cAnswer = danxuanQuestionStore.getAt(curDanxuanProblemNumber).get(
			'option3');
	var dAnswer = danxuanQuestionStore.getAt(curDanxuanProblemNumber).get(
			'option4');
	Ext.getCmp('danxuanDisplayProblem').setValue(1 + localCurProblemNum + ". " + firstProblem);
	Ext.getCmp('danxuanOptionA').setBoxLabel("<font size='2px' font-weight='bold'>" + "A. " + aAnswer + "</font>");
	Ext.getCmp('danxuanOptionB').setBoxLabel("<font size='2px' font-weight='bold'>" + "B. " + bAnswer + "</font>");
	Ext.getCmp('danxuanOptionC').setBoxLabel("<font size='2px' font-weight='bold'>" + "C. " + cAnswer + "</font>");
	Ext.getCmp('danxuanOptionD').setBoxLabel("<font size='2px' font-weight='bold'>" + "D. " + dAnswer + "</font>");

	if (danxuanAnswerArray[localCurProblemNum] == 1) {
		Ext.getCmp('danxuanOptionA').setValue(true);
	} else if (danxuanAnswerArray[localCurProblemNum] == 2) {
		Ext.getCmp('danxuanOptionB').setValue(true);
	} else if (danxuanAnswerArray[localCurProblemNum] == 3) {
		Ext.getCmp('danxuanOptionC').setValue(true);
	} else if (danxuanAnswerArray[localCurProblemNum] == 4) {
		Ext.getCmp('danxuanOptionD').setValue(true);
	} else if (danxuanAnswerArray[localCurProblemNum] == 0) {
		Ext.getCmp('danxuanOptionA').setValue(false);
		Ext.getCmp('danxuanOptionB').setValue(false);
		Ext.getCmp('danxuanOptionC').setValue(false);
		Ext.getCmp('danxuanOptionD').setValue(false);
	}
}
//将多选题的题目和选项展示到页面
function getDuoxuanProblemAndAnswer(localCurProblemNum) {
	var firstProblem = duoxuanQuestionStore.getAt(localCurProblemNum).get(
			'question');
	var aAnswer = duoxuanQuestionStore.getAt(curDuoxuanProblemNumber).get(
			'option1');
	var bAnswer = duoxuanQuestionStore.getAt(curDuoxuanProblemNumber).get(
			'option2');
	var cAnswer = duoxuanQuestionStore.getAt(curDuoxuanProblemNumber).get(
			'option3');
	var dAnswer = duoxuanQuestionStore.getAt(curDuoxuanProblemNumber).get(
			'option4');
	Ext.getCmp('duoxuanDisplayProblem').setValue( 1 + localCurProblemNum + ". " + firstProblem );
	Ext.getCmp('duoxuanOptionA').setBoxLabel("<font size='2px' font-weight='bold'>" + "A. " + aAnswer + "</font>");
	Ext.getCmp('duoxuanOptionB').setBoxLabel("<font size='2px' font-weight='bold'>" + "B. " + bAnswer + "</font>");
	Ext.getCmp('duoxuanOptionC').setBoxLabel("<font size='2px' font-weight='bold'>" + "C. " + cAnswer + "</font>");
	Ext.getCmp('duoxuanOptionD').setBoxLabel("<font size='2px' font-weight='bold'>" + "D. " + dAnswer + "</font>");

	if (duoxuanAnswerArray[localCurProblemNum][0] == 1) {
		Ext.getCmp('duoxuanOptionA').setValue(true);
	} else {
		Ext.getCmp('duoxuanOptionA').setValue(false);
	}
	if (duoxuanAnswerArray[localCurProblemNum][1] == 1) {
		Ext.getCmp('duoxuanOptionB').setValue(true);
	} else {
		Ext.getCmp('duoxuanOptionB').setValue(false);
	}
	if (duoxuanAnswerArray[localCurProblemNum][2] == 1) {
		Ext.getCmp('duoxuanOptionC').setValue(true);
	} else {
		Ext.getCmp('duoxuanOptionC').setValue(false);
	}
	if (duoxuanAnswerArray[localCurProblemNum][3] == 1) {
		Ext.getCmp('duoxuanOptionD').setValue(true);
	} else {
		Ext.getCmp('duoxuanOptionD').setValue(false);
	}
}
//将判断题的题目展示到页面
function getPanduanProblemAndAnswer(localCurProblemNum) {
	var firstProblem = panduanQuestionStore.getAt(localCurProblemNum).get(
			'question');

	Ext.getCmp('panduanDisplayProblem').setValue( 1 + localCurProblemNum + ". " + firstProblem );
	
	if (panduanAnswerArray[localCurProblemNum] == 1) {
		Ext.getCmp('panduanOptionA').setValue(true);
	} else if (panduanAnswerArray[localCurProblemNum] == 2) {
		Ext.getCmp('panduanOptionB').setValue(true);
	} else if (panduanAnswerArray[localCurProblemNum] == 0) {
		Ext.getCmp('panduanOptionA').setValue(false);
		Ext.getCmp('panduanOptionB').setValue(false);
	}
}

// 将第一题的内容从store中取出放入题目区域
function getFirstDanxuanProblem() {
	if(isExamBegin == true){
		curDanxuanProblemNumber = 0;
		getDanxuanProblemAndAnswer(curDanxuanProblemNumber);
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}

}

function getPreviousDanxuanProblem() {
	if(isExamBegin == true){
		if(curDanxuanProblemNumber == -1){
			Ext.MessageBox.alert("请选择第一题开始作答");
		}else{
			if (curDanxuanProblemNumber == 0) {
				Ext.MessageBox.alert("当前已是第一题");
			} else {
				curDanxuanProblemNumber--;
				getDanxuanProblemAndAnswer(curDanxuanProblemNumber);
			}
		}
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}
	
	
}
function getNextDanxuanProblem() {
	if(isExamBegin == true){
		getTotalDanxuanProblemNumber();
		if (curDanxuanProblemNumber == totalDanxuanProblemNumber - 1) {
			Ext.MessageBox.alert("当前已是最后一题，请继续作答其它类型的题目");
		} else {
			curDanxuanProblemNumber++;
			getDanxuanProblemAndAnswer(curDanxuanProblemNumber);
		}
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}
	
}
function getLastDanxuanProblem() {
	if(isExamBegin == true){
		getTotalDanxuanProblemNumber();
		curDanxuanProblemNumber = totalDanxuanProblemNumber - 1;
		getDanxuanProblemAndAnswer(curDanxuanProblemNumber);
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}

}


// 有关多选题的方法
// --------------------------------------------------------------------------------
function getFirstDuoxuanProblem() {
	if(isExamBegin == true){
		curDuoxuanProblemNumber = 0;
		getDuoxuanProblemAndAnswer(curDuoxuanProblemNumber);
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}

	
}

function getPreviousDuoxuanProblem() {
	if(isExamBegin == true){
		if(curDuoxuanProblemNumber == -1 ){
			Ext.MessageBox.alert("请选择第一题开始作答");
		}else{
			if (curDuoxuanProblemNumber == 0) {
				Ext.MessageBox.alert("当前已是第一题");
			} else {
				curDuoxuanProblemNumber--;
				getDuoxuanProblemAndAnswer(curDuoxuanProblemNumber);
			}
		}
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}
	
	
}
function getNextDuoxuanProblem() {
	if(isExamBegin == true){
		getTotalDuoxuanProblemNumber();
		if (curDuoxuanProblemNumber == totalDuoxuanProblemNumber - 1) {
			Ext.MessageBox.alert("当前已是最后一题，请继续作答其它类型的题目");
		} else {
			curDuoxuanProblemNumber++;
			getDuoxuanProblemAndAnswer(curDuoxuanProblemNumber);
		}
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}
	
}
function getLastDuoxuanProblem() {
	if(isExamBegin == true){
		getTotalDuoxuanProblemNumber();
		curDuoxuanProblemNumber = totalDuoxuanProblemNumber - 1;
		getDuoxuanProblemAndAnswer(curDuoxuanProblemNumber);
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}
	
}
//有关判断题的方法
//-------------------------------------------------------------
function getFirstPanduanProblem() {
	if(isExamBegin == true){
		curPanduanProblemNumber = 0;
		getPanduanProblemAndAnswer(curPanduanProblemNumber);
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}
	
}

function getPreviousPanduanProblem() {
	if(isExamBegin == true){
		if(curPanduanProblemNumber == -1){
			Ext.MessageBox.alert("请选择第一题开始作答");
		}else{
			if (curPanduanProblemNumber == 0) {
				Ext.MessageBox.alert("当前已是第一题");
			} else {
				curPanduanProblemNumber--;
				getPanduanProblemAndAnswer(curPanduanProblemNumber);
			}
		}
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}
	
	
}
function getNextPanduanProblem() {
	if(isExamBegin == true){
		getTotalPanduanProblemNumber();
		if (curPanduanProblemNumber == totalPanduanProblemNumber - 1) {
			Ext.MessageBox.alert("当前已是最后一题，请继续作答其它类型的题目");
		} else {
			curPanduanProblemNumber++;
			getPanduanProblemAndAnswer(curPanduanProblemNumber);
		}
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}
	
}
function getLastPanduanProblem() {
	if(isExamBegin == true){
		getTotalPanduanProblemNumber();
		curPanduanProblemNumber = totalPanduanProblemNumber - 1;
		getPanduanProblemAndAnswer(curPanduanProblemNumber);
	}else{
		Ext.MessageBox.alert("请点击开始考试");
	}
	
}

//提交答案
function commitAnswerResult() {
	if(iscommit == false){
		iscommit = true;
		buildDanxuanAnswerArray();
		buildDuoxuanAnswerArray();
		buildPanduanAnswerArray();
		ProblemDanXuanController.insertDanXuanAnswerRecord(danxuanJsonArray,function(datadanxuan){
			if(datadanxuan == true){
				ProblemDuoXuanController.insertDuoXuanAnswerRecord(duoxuanJsonArray,function(dataduoxuan){
					if(dataduoxuan == true){
						ProblemPanDuanController.insertPanDuanAnswerRecord(panduanJsonArray,function(datapanduan){
							if(datapanduan == true){
								Ext.MessageBox.alert("答案提交成功");
								calculateScoreByPerson();
							}else{
								Ext.MessageBox.alert("判断答案提交失败");
							}
						});
					}else{
						Ext.MessageBox.alert("多选答案提交失败");
					}
				});
			}else{
				Ext.MessageBox.alert("单选答案提交失败");
			}
		});
		
		
		
		
		
		
	}

}
//构造单选答案对象数组
function buildDanxuanAnswerArray(){
	getTotalDanxuanProblemNumber();
	for(var i = 0 ; i < totalDanxuanProblemNumber ; i++){
		//id,loginname,papernum,danxuanid,answer,isright,remark
		var danxuanJson = {};
		danxuanJson.id = '';
		danxuanJson.loginname = loginname;
		danxuanJson.papernum = papernum;
//		danxuanJson.papernum = 1;
		danxuanJson.danxuanid =  danxuanQuestionStore.getAt(i).get('id');
		danxuanJson.isright = '';
		danxuanJson.remark = remark;
		danxuanJson.answer = danxuanAnswerArray[i];
		
		danxuanJsonArray.push(danxuanJson);
	}
}

//构造多选答案对象数组
function buildDuoxuanAnswerArray(){
	getTotalDuoxuanProblemNumber();
	for(var i = 0 ; i < totalDuoxuanProblemNumber ; i++){
		//id,loginname,papernum,duoxuanid,answer,isright,remark
		var answerValue = 1;
		var duoxuanJson = {};
		duoxuanJson.id = '';
		duoxuanJson.loginname = loginname;
		duoxuanJson.papernum = papernum;
//		duoxuanJson.papernum = 1;
		duoxuanJson.duoxuanid =  duoxuanQuestionStore.getAt(i).get('id');
		duoxuanJson.isright = '';
		duoxuanJson.remark = remark;
		for(var j = 0 ; j < 4 ; j++){
			if(j == 0 && duoxuanAnswerArray[i][j] == 1)
				answerValue *= 2;
			if(j == 1 && duoxuanAnswerArray[i][j] == 1)
				answerValue *= 3;
			if(j == 2 && duoxuanAnswerArray[i][j] == 1)
				answerValue *= 5;
			if(j == 3 && duoxuanAnswerArray[i][j] == 1)
				answerValue *= 7;
		}
		duoxuanJson.answer = answerValue;

		duoxuanJsonArray.push(duoxuanJson);
	}
}
//构造判断答案对象数组
function buildPanduanAnswerArray(){
	getTotalPanduanProblemNumber();
	for(var i = 0 ; i < totalPanduanProblemNumber ; i++){
		//id,loginname,papernum,danxuanid,answer,isright,remark
		var panduanJson = {};
		panduanJson.id = '';
		panduanJson.loginname = loginname;
		panduanJson.papernum = papernum;
//		panduanJson.papernum = 1;
		panduanJson.panduanid =  panduanQuestionStore.getAt(i).get('id');
		panduanJson.isright = '';
		panduanJson.remark = remark;
		panduanJson.answer = panduanAnswerArray[i];
		
		panduanJsonArray.push(panduanJson);
	}
}

//计算考生成绩
//String loginName, String paperNum,String remark,String testPaperRecordId
function calculateScoreByPerson(){
	ScoreRecordController.caculateScoreByPerson(loginname,papernum,remark,testpaperrecordid,function(data){
		if(data != null){
			data = eval(data);
			Ext.getCmp('grade').setValue(data.totalScore+" "+data.scoreremark);
		}
		
	});
}
//显示时间的函数,到时间交卷
function clockon()
{
    var now = new Date();
    
    var year = now.getFullYear();
    var month = now.getMonth() + 1;
    var date = now.getDate();
    var hour = now.getHours();
    var minu = now.getMinutes();
    var sec = now.getSeconds();
    
    if(month<10)month="0"+month;
    if(date<10)date="0"+date;
    if(hour<10)hour="0"+hour;
    if(minu<10)minu="0"+minu;
    if(sec<10)sec="0"+sec;
    var time = "";
    time = year+"-"+month+"-"+date+" "+hour+":"+minu+":"+sec;
    checktime = year+"-"+month+"-"+date+" "+hour+":"+minu;
    Ext.getCmp('curtime').setValue(time);
    if(endtime == checktime){
    	commitAnswerResult();
    }
    
    setTimeout("clockon()",200);
            
}

//读取出卷记录里面的内容到全局变量
function readTestPaperRecordInfo(){
	testpaperrecordid =  testpaperRecordStore.getAt(0).get('id');
	papernum =  testpaperRecordStore.getAt(0).get('papernum');
	starttime = testpaperRecordStore.getAt(0).get('starttime');
	endtime = testpaperRecordStore.getAt(0).get('endtime');
	examname = testpaperRecordStore.getAt(0).get('examname');
	
	//设置考试时间
	Ext.getCmp('examtime').setValue(starttime + "  至  " + endtime);
	Ext.getCmp('examname').setValue("<b>" + examname + "</b>");
	
}

//开始考试，加载题目
function examBegin(){
	if(isExamBegin == false){
		
		readTestPaperRecordInfo();
		judgeisTheStudentExamed();

	}
	
}
function judgeisTheStudentExamed(){
	TestPaperRecordController.judgeWhetherTheUserIsExamed(loginname,papernum,function(data){
		if(data == true){
			isExamed = true;
			Ext.MessageBox.alert("您已经参加了本次考试，不能再考试");
		}else{
			
			//如果当前时间>=开始时间才可以考试 并且 <= 结束时间 才可以考试
			var dstart=new Date(starttime.replace(/-/g,"/"));
			var dend=new Date(endtime.replace(/-/g,"/"));
			var dcheck=new Date(checktime.replace(/-/g,"/"));
			if(Date.parse(dcheck) >= Date.parse(dstart) && Date.parse(dcheck) <= Date.parse(dend)){
				isExamBegin = true;
				danxuanQuestionStoreInit();
				duoxuanQuestionStoreInit();
				panduanQuestionStoreInit();
			}
			else
				Ext.MessageBox.alert("当前非考试时间");
		}
	});
}

clockon();

