package com.egov.secrecysystem.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.directwebremoting.WebContextFactory;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.egov.secrecysystem.dao.CpAnswerRecordDao;
import com.egov.secrecysystem.dao.CpQuestionDao;
import com.egov.secrecysystem.model.CpAnswerRecord;
import com.egov.secrecysystem.model.CpQuestion;

@Service
public class CpQuestionService {
	@Autowired
	private CpQuestionDao cpQuestionDao;
	@Autowired
	private CpAnswerRecordDao cpAnswerRecordDao;
	
	/**
	 * @author yangfan
	 * @return
	 * 获取所有竞赛题目信息
	 * 在每题题目信息中添加字段判断当前用户是否已经答题
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public List<Map> getQuestionRecordList(String loginName) {
		try {
			// List<Map> paperNumList = cpQuestionDao.getQuestionRecordList();
			List<Map> paperNumList = new ArrayList<Map>();
			List<CpQuestion> list = cpQuestionDao.getAllQuestionRecordList();
			for(CpQuestion cpQuestion: list) {
				Map map = new JSONObject();
				map.put("id", cpQuestion.getId());
				map.put("number", cpQuestion.getNumber());
				map.put("question", cpQuestion.getQuestion());
				String submit = "no";
				for(CpAnswerRecord cpAnswerRecord:cpQuestion.getCpAnswerRecords()) {
					if(cpAnswerRecord.getCpUser().getLoginname().equals(loginName)) {
						submit = "yes";
						break;
					}
				}
				map.put("submit", submit);
				paperNumList.add(map);
			}
			return paperNumList;
		} catch (Exception e) {
			System.out.println("getpaperNumList error!" + e.getMessage());
			return null;
		}
	}
	
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public List<Map> getPageInstructors(String whereString,
			Map<String, Object> valuesMap, String pageNum, String pageSize) {
		try {
			return cpQuestionDao.getPageInstructors(whereString, valuesMap,
					Integer.parseInt(pageNum), Integer.parseInt(pageSize));
		} catch (Exception e) {
			System.out.println("getPageInstructors error");
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * @param whereString
	 * @param valuesMap
	 * @return
	 * 根据查询条件获取题目总数
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public long getInstructorsTotalCount(String whereString,
			Map<String, Object> valuesMap) {
		try {
			return cpQuestionDao.getInstructorsTotalCount(whereString,
					valuesMap);
		} catch (Exception e) {
			System.out.println("getInstructorsTotalCount error");
			e.printStackTrace();
			return 0;
		}
	}
	
	/**
	 * @param id
	 * @return
	 * 根据id获取题目信息
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public CpQuestion findCpQuestionById(String id){
		return cpQuestionDao.findCpQuestionById(id);
	}
	
	/**
	 * @param whereString
	 * @param valuesMap
	 * @param pageNum
	 * @param pageSize
	 * @return
	 * 分页获取题目信息
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public List<Map> pageInit(String whereString,
			Map<String, Object> valuesMap, String pageNum, String pageSize) {
		try {
			return cpQuestionDao.pageInit(whereString, valuesMap,
					Integer.parseInt(pageNum), Integer.parseInt(pageSize));
		} catch (Exception e) {
			System.out.println("getPageInstructors error");
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * @param instructors
	 * @return
	 * 批量导入题目之前进行检查
	 * 检查：是否存在空格、以及题目标号是否出现重复
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public String checkInstructorsData(List<JSONObject> instructors) {
		try {
			int instructorcount = 1;
			int questionNum;
			Object object;
			Map map = new JSONObject();
			for (JSONObject instructor : instructors) {
				instructorcount++;
				if(instructor.get("number") == null)  return "第" + instructorcount + "行题号不能为空";
				if(instructor.get("question") == null) return "第" + instructorcount + "行题目不能为空"; 
				if(instructor.get("rightanswer") == null) return "第" + instructorcount + "行答案不能为空"; 
				if(instructor.get("scorevalue") == null) return "第" + instructorcount + "行分值不能为空";
				
				if(map.containsKey(instructor.get("number").toString())) {
					return "第" + instructorcount + "行题号不能出现重复";
				}
				map.put(instructor.get("number").toString(), instructor.get("number").toString());
			}
			return null;
		} catch (Exception e) {
			return e.getMessage();
		}

	}
	
	/**
	 * @param instructors
	 * @return
	 * 批量导入填空题目信息
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public boolean importInstructors(List<JSONObject> instructors) {
		try {
			// 批量导入填空题目信息先清楚历史答题以及题目信息
			cpAnswerRecordDao.clearHistoryData();
			cpQuestionDao.clearHistoryData();
			int instructorcount = 0;
			CpQuestion entity;
			for (JSONObject instructor : instructors) {
				entity = new CpQuestion();
				entity.setNumber(Integer.parseInt(instructor.get("number").toString()));
				entity.setQuestion(instructor.get("question").toString());
				entity.setRightanswer(instructor.get("rightanswer").toString());
				entity.setQuestion(instructor.get("question").toString());
				entity.setScorevalue(Integer.parseInt(instructor.get("scorevalue").toString()));
				entity.setRemark(instructor.get("remark").toString());
				
				cpQuestionDao.save(entity);
				if (instructorcount % 50 == 0) {
					cpQuestionDao.getSession().flush();
					cpQuestionDao.getSession().clear();
				}
				instructorcount++;
			}
			return true;
		} catch (Exception e) {
			System.out.println("importInstructors error");
			e.printStackTrace();
			cpQuestionDao.getSession().getTransaction().rollback();
			return false;
		}
	}
	
	// 保存题目
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public String saveInstructor(JSONObject instructor) {
		try {

			CpQuestion entity = new CpQuestion();
			
			entity.setNumber(Integer.parseInt(instructor.get("number").toString()));
			entity.setQuestion(instructor.get("question").toString());
			entity.setRightanswer(instructor.get("rightanswer").toString());
			entity.setScorevalue(Integer.parseInt(instructor.get("scorevalue").toString()));
			cpQuestionDao.save(entity);
			return "success";
		} catch (Exception e) {
			e.printStackTrace();
			return "error";
		}
	}
	
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public String updateInstructorAllInfo(JSONObject instructor) {

		if (instructor.get("id").toString().equals("")) {
			return this.saveInstructor(instructor);
		} else {
			try {
				String result="";
				CpQuestion entity = cpQuestionDao.findById(instructor
						.get("id").toString());
				if(entity == null){
					result="falure";
				}
				else{
					entity.setNumber(Integer.parseInt(instructor.get("number").toString()));
					entity.setQuestion(instructor.get("question").toString());
					entity.setRightanswer(instructor.get("rightanswer").toString());
					entity.setScorevalue(Integer.parseInt(instructor.get("scorevalue").toString()));
					cpQuestionDao.update(entity);
					result="success";
				}
				
				return result;
			} catch (Exception e) {
				e.printStackTrace();
				return "error";
			}
		}
	}
	
	/**
	 * 根据id删除题目
	 * @param ids
	 * @return
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public String deleteInstructors(List<String> ids) {
		String result="";
		try {
			for (String id : ids) {
				CpQuestion entity = cpQuestionDao.findById(id);
				if(entity == null){
					result="falure";
				}else{
					cpQuestionDao.delete(entity);
					result="success";
				}
			}
			return result;
		} catch (Exception e) {
			System.out.println("deleteInstructors error");
			e.printStackTrace();
			return "error";
		}
	}
	
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public List<Map> getInstructorsInfoExcel() {
		try {
			return cpQuestionDao.getInstructorsInfoExcel();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * @author LiangGe
	 * @return
	 * 获取题目数量
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public int getQuestionCount(){
		return cpQuestionDao.getQuestionCount();
	}
	
	
}
